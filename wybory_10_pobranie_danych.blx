<?xml version='1.0' encoding='iso-8859-2' ?>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
<title>Pobranie danych z wyborów samorz±dowych 2010</title>
<!-- Tags: inne,polityka,wybory,perl-->
</head><body><!-- ##Published : 2018-10-03T02:44:44CEST ##-->

<p>Co wybory to inaczej oczywi¶cie...</p>
<p>Wyniki wyborów 2010 s± na stronie <code>http://wybory2010.pkw.gov.pl/</code>.
Punktem wyj¶cia jest za¶ strona z wynikami dla województwa
postaci
<code>http://wybory2010.pkw.gov.pl/geo/pl/020000/020000-o-020000-RDA-2.html?wyniki=1</code>,
w której wiod±ce <code>02</code> z <code>020000</code>
to kod teryt województwa a <code>2</code> przed <code>.html</code>
to numer okrêgu wyborczego. Zatem pobranie wszystkich stron
`okrêgowych' sprowadza siê do:
</p>
<pre>
#!/usr/bin/perl
#
use LWP::Simple;
#
my $uribase = 'http://wybory2010.pkw.gov.pl/geo/pl';
@Woj = ("02", "04", "06", "08", "10", "12", "14", "16",
  "18", "20", "22", "24", "26", "28", "30", "32");
@Okr = (1,2,3,4,5,6,7,8,9,10); ## nadmiarowo (max jest 8 chyba)

for $w (@Woj) {
  for $o (@Okr) {
    $url = "$uribase/${w}0000/${w}0000-o-${w}0000-RDA-${o}.html?wyniki=1";
    $file = "ws2010_woj_${w}_${o}";
    getstore($url, $file);
    print STDERR "$url stored\n";
  }
}
</pre>
<p>Teraz siê okazuje ¿e ka¿dy taki plik zawiera odno¶niki
postaci <code>/owk/pl/020000/2c9682212bcdb46c012bcea96efe0131.html</code>.
Ka¿dy taki plik opisuje kandydata startuj±cego w wyborach.
Ich pobranie jest równie banalne:
</p>
<pre>
#!/usr/bin/perl
#
use LWP::Simple;
use locale;
use utf8;
binmode(STDOUT, ":utf8");
use open IN => ":encoding(utf8)", OUT => ":utf8";

$baseURI="http://wybory2010.pkw.gov.pl";
$file = $ARGV[0];

while (&lt;>) {
  chomp();
  if (/(owk\/[^&lt;>"]*)/) {
     $url= "$baseURI/$1";
     if (/(owk\/[^&lt;>"]*)[^&lt;>]*>([^&lt;>]*)/) {
       $who = "$2"; $who =~ s/ //g;
       $who =~ tr/¡ÆÊ£ÑÓ¦¯¬/ACELNOSZZ/;
       $who =~ tr/±æê³ñó¶¿¼/acelnoszz/;
     } else {$who = "XxYyZz"; }

     $outFile = "owk_${file}__${who}";
     getstore($url, $outFile);
     print STDERR "$url stored ($outFile)\n";
  }
}
## pobranie wszystkich owk-URLi to:
## for i in ws2010_woj* ; do perl pobierz-owk.pl $i ; done
</pre>
<p>
W plikach `owk' s± linki do protoko³ów z wynikami z poszczególnych komisji.
S± to linki postaci:
<code>/obw/pl/3206/bacbedd03197794e2e1e8e438bff87e1.html</code>. Nale¿y
je wszystkie pobraæ (URLe nie pliki) i posortowaæ usuwaj±c duplikaty.
Powinno byæ takich URLi oko³o 25--27 tysiêcy (tyle ile komisji):
</p>
<pre>
#!/usr/bin/perl
#
$baseURI="http://wybory2010.pkw.gov.pl";
$file = $ARGV[0];

while (&lt;>) {  chomp();
  if (/(obw\/[^&lt;>"]*)/) {
     $url= "$baseURI/$1";
     if (/(obw\/[^&lt;>"]*)[^&lt;>]*>([^&lt;>]*)/) {
         $obwNr = "$2"; }
     $outFile = "${file};${obwNr}";
     print "$url;$outFile\n";
} }
## for i in owk_2010* ; do perl pobierz-obw.pl $i ; done > proto0.csv
## awk -F';' '{print $1";"$3}' proto0.csv | sort -u > protokoly.csv
## wc -l protokoly.csv
## 25464 protokoly.csv
</pre>
<p>Ka¿dy URL jest postaci <code>/obw/pl/0201/051595429cc31a526f8b2455602ab929.html</code>.
Te <code>0201</code> to pewnie teryt powiatu,
ale reszta wydaje siê losowa wiêc
nie da siê ustaliæ jakiego¶ schematu URLi protoko³ów, bo go nie ma po prostu.
Teraz postaje pobraæ te 25464 plików-protoko³ów z komisji
obwodowych. Na wszelki wypadek bêdê zapisywa³ te protoko³y wg schematu:
<code>proto_ws_2010_terytPowiatu_nrkomisji</code>:</p>
<pre>
#!/usr/bin/perl
##
use LWP::Simple;
open (O, "protokoly.csv") || die "No protokoly.csv!";
while (&lt;O>) { chomp();
  ($url, $nrk) =  split /;/, $_;
  $_ =~ m#http://wybory2010.pkw.gov.pl/obw/pl/([0-9][0-9][0-9][0-9])#;
  $teryt = $1;
  $outFile = "proto_ws_2010_${teryt}_$nrk";
  getstore($url, $outFile);
  print STDERR "*** $url stored ($outFile)\n";
}
close(O);
## time perl get-proto.pl
</pre>
<p>Mi siê ¶ci±ga³o 62 minuty 30 sekund.
</p>

</body></html>
<!--
Local variables:
 mode: nxml
 coding: iso-8859-2
 LocalWords: Przechlewski
 ispell-local-dictionary: "polish"
End:
-->
